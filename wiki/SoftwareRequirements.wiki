#summary Software requirements for the project
#labels Phase-Requirements

= 1.	Introduction =
== 1.1	Purpose ==
This document describes the requirements for the game, _Psychomachia_.
== 1.2	Document Conventions ==
Any references to sections within this document will be placed in parenthesis, such as (4.1) would tell you to look at section 4.1 for further information.

The glossary at the end of the document will define any uncommon words or phrases that were used.
== 1.3	Intended Audience and Reading Suggestions ==
The document is meant for the software project group and also for the client to
specify what will be implemented in the _Psychomachia_ game software.
== 1.4	Project Scope ==
_Psychomachia_ is a software that provides entertainment value for anyone that isn’t sensitive to gratuitous amounts of violence.
= 2.	Overall Description =
== 2.1	Product Perspective ==
_Psychomachia_ is a self-contained product that is meant to develop the software engineering skills of the team members.  The story is a creation of the game designers.
== 2.2	Product Features ==
The game is primarily going to be a single-player, offline game with a local high score list.  An achievement system to reward players for accomplishing a task will also be needed.  The user will also be able to upgrade their character’s abilities as well as upgrade the various weapons they will encounter during the game.  Because of this, there must be the ability to save and reload a game.

The perspective on the game will be 2D and the camera will come from a top-down view.  The AI will be very basic as the enemies are zombies, but the “boss” zombies will be smarter.  The user will be presented with a simple interface to display pertinent game information (4.1).
== 2.3	User Classes and Characteristics ==
_Psychomachia_ will have one main user class, that being the player.  Members of this user class will vary greatly, but will possess a few common traits.  A member will be familiar with basic keyboard and mouse mechanics and will likely have experience with other games that run in a similar manner.
== 2.4	Operating Environment ==
The game will be guaranteed to work in the Windows environment, and specifically tested on Windows XP and Windows 7.  It will run as a standalone executable file and should not interfere with any existing systems.  The game will require the use of a keyboard and mouse to operate.
== 2.5	Design and Implementation Constraints ==
The game will be created using the Game Maker 8.0 software, so design and implementation will be limited by what Game Maker, and any extension libraries, allow us to do.  The utility of the software will be expanded slightly because we’ll be using the Pro edition of Game Maker, which will allow extensive use of the proprietary Game Maker Language.
== 2.6	User Documentation ==
A user manual that describes the story and game mechanics will be provided so that the player can learn the controls of the game.  A simpler version of the user manual will be available in the actual game for a quick reference.
== 2.7	Assumptions and Dependencies ==
There are no extenuating assumptions or dependencies for the project.

= 3.	System Features =
==3.1 User will be able to save and load games == 
===3.1.1 Description and Priority===
    The user will be able to easily save and reload the game whenever desired. <br>This feature is essential for the system as the user will want to stop playing and restart where he/she left off previously, so the priority is high.  
=== 3.1.2 Response Sequences ===
|| UC  01 || The User saves a game ||
|| Description: || The system must have the capability to save the current state of the game being played. ||
|| Precondition: || A game is currently being played. ||
|| Postcondition: || The current game has been saved in a file. ||
|| Normal Sequence: || The user selects the save option from the menu. <br>The system opens a dialog window where the user can specify the game's name and the location where it can be saved to. <br> The user makes the necessary choices. <br> The system saves the game in a file.   ||
|| UC 02 || The user loads a game ||
|| Description: || The system must be able to load a game from a file.||
|| Precondition: || A game has already been saved to a file. ||
|| Post-condition: || The game has been loaded from a file, and is currently being played. ||
|| Normal Sequence: ||   The user selects the load option from the menu. <br> The system opens a dialog window for the user to choose a file to load. <br> The user makes the necessary choices. <br> The System loads the game from the file. ||
|| Exceptions: || Condition:  No saved file already exists. <br> Action: The user clicks on cancel. <br> Ending: The use case aborts. ||



===3.1.3 Functional Requirements===
    If the user desires to save a file, the system should save the current state of the game. If the user wants to load a game, the system should load a previously saved game state.

----

==3.2 Simple AI will be implemented for the enemies==
===3.2.1 Description and Priority===
    The system will have a very basic AI system to control the movement of the enemies. This feature has a medium-high priority, as the enemies need to be able to attack the player, or the game would be very boring and easy.
===3.2.2 Response Sequences===
|| UC 03 || The enemies need to react to their surroundings and current game conditions. ||
|| Description: || When an enemy is created, it must respond to current surroundings and game information. ||
|| Precondition: || The enemy is created. ||
|| Post-condition: ||  The enemy reacts to game conditions. ||
|| Normal Sequence:|| The enemy is created.<br>The enemy moves and attacks according to surroundings and game conditions. ||



===3.2.3 Functional Requirements===
    Once created, the enemies will react to the player and the surroundings based on a specified methodology of actions. All movement of the enemies must use some form of specified AI.

----

==3.3 Online Capabilities==
===3.3.1 Description and Priority===
    If time permits, the system may implement an online mode the user will be able to play. <br> This feature has a low priority, because it is only an optional feature. The game will be fully playable without the online mode.
===3.3.2 Response Sequences===
|| UC 04 || The user decides to play online. ||
|| Description: || The system must be able to connect to a host and transfer data back and forth to play online. ||
|| Precondition: || The user chooses to play online. ||
|| Post-condition: || The user is playing/has played online with other users over a network. ||
|| Normal Sequence: || The user selects the online option from the menu screen. <br> The system opens up a dialog box asking the user for the host IP address.<br> The system establishes a connection with the host server and the game begins.|| 



===3.3.3 Functional Requirements===
    Once the user requests to play online, the system should easily connect to the host and establish a secure connection.

----

==3.4 2D Game Interface==
===3.4.1 Description and Priority===
    The game will use a basic top-down, 2 dimensional view to allow the user to interact with the world around him. Menus and other option panes will also be in a basic 2D view. <br> This feature has a high priority, because it will display all game information to the user and allow the user to interact with the game.
===3.4.2 Response Sequences===
|| UC 05 || The user starts the game, requiring the interface to start. ||
|| Description: || The system must display an interface to the user. ||
|| Precondition: || The user starts the game. ||
|| Post-condition: || The system displays an interface to the user to interact with. ||
|| Normal Sequence: || The user starts the game. <br> The system displays the interface to the user. ||



===3.4.3 Functional Requirements===
    Once the user starts the game, the system must display the 2D interface.

----

==3.5 The game ends on a predefined condition==
===3.5.1 Description and Priority===
    Every game has an ending condition defined in the game definition. When the conditions are met, the game ends, and the system displays the users final score as well as other information about the finished game.<br> This feature has a high priority, otherwise the user will never finish the game and will only be wandering around the world.
===3.5.2 Response Sequences===
|| UC 06 || The user fulfills all winning conditions of the game. ||
|| Description: || Once the user completes all quests, the game must end. ||
|| Precondition: || A game is being played. ||
|| Post-conditions: || The current game is finished and the user has completed all winning conditions. ||
|| Normal Sequence:|| The user is playing a game. <br>The user fulfills the final winning condition for the game. <br> The system displays some winning screen and the users final score. <br> The system returns to the main menu. ||



===3.5.3 Functional Requirements===
    Once all the quest requirements of the game are met, the game will begin an ending sequence and the game will end.  
    
----

= 4.	External Interface Requirements =
== 4.1	User Interfaces ==
The User Interface will consist of the main game window that will show the main character and any NPCs, enemies, obstacles, scenery, background images, and items that are within the view distance of the character.  Any combination of these objects may be displayed at any time given the number of situations a player could get his/her character into.

Along with the main game screen will be a number of other static displays to provide information to the user.  These displays include a status bar with information on the amount of health, money, ammo, and a player has, a minimap that will show the players current location in relation to the obstacles surrounding him/her, a collapsible inventory/character info screen that will display what items the player currently possesses as well as what he/she has equipped, and a menu that contains options such as sound settings, and an exit option.

The last thing displayed on the game window will be a crosshair (different for different weapons) to show the player where his/her character is currently aiming.  The crosshair will follow the player’s mouse movements to allow for the most accurate aiming.

== 4.2	Hardware Interfaces ==
The user will control his/her character using a keyboard and mouse.  The keyboard will be responsible for movement (W, A, S, and D for up, left, down, and right respectively), selecting specific weapons (number keys), interacting with NPCs (E), reloading his/her weapon (R), accessing the inventory/equipment screen (I), using a specialty item, such as grenades, mines, etc. (Q), using a health pack (F), and accessing the menu (ESC).

The mouse will be used for aiming the characters weapon (mouse position), shooting (left-click), cycling through equipped weapons (scrolling the mouse-wheel up and down), and a possible activating/deactivating aiming down the sights of the weapon may be added (this would increase accuracy and damage, but reduce movement and defense) (right-click).
== 4.3	Software Interfaces ==
The only software interface required to use the software is a Windows Operating System
== 4.4	Communications Interfaces ==
A communication Interface will only need to be setup in the event that we integrate an online scoreboard or a multiplayer game mode.  In the event that these features are implemented, the user will be required to use the Internet Explorer web browser to access the game/scoreboard.  The software will need to be able to communicate with a server that will keep track of the players items, status (health, ammo, etc.), and location, as well as the high score players.
= 5.	Other Nonfunctional Requirements =
== 5.1	Performance Requirements ==
=== 5.1.1 Game Mechanics ===
When a zombie is hit with a bullet, the damage should be registered within a half a second.  Also, the ammo indicator should reflect the loss of ammunition within the same time frame.  The collision detection for when a zombie hits a player should react in the same time frame as well.  When a zombie enters the visible view, it should be indicated on the radar.


== 5.2	Security Requirements ==
Security is not a major concern for our game as it is predominately, if not entirely, offline and single player.

== 5.3	Software Quality Attributes ==
=== 5.3.1 Portability ===
The Game Maker environment is only viable on the Windows platform.

=== 5.3.2 Usability ===
Usability is highly important.  This is an entertainment-based software and we want it to be enjoyed by as many people as possible.

 
= Appendix A: Glossary =
NPC
 Non-playable character – anyone who appears in the game who cannot be controlled by the player

Psychomachia
 Battle for man's soul

Ingredients
 Items found by defeating boss characters that the scientists need to combine to create the cure

Minimap
 A miniature representation of the area that will show nearby enemies


= Appendix B: Analysis Models =
http://i781.photobucket.com/albums/yy95/psychomachia_awesome/HUDConcept.png

Figure 1.1 Concept art for user interface

Figure 1.1 shows the early design for what the user interface should look like.  It should display the player's health, the current main and side weapons the player is carrying as well as the ammo, and have a minimap to better see the surrounding area.  The player is represented as the black circle while zombies are the green circles.